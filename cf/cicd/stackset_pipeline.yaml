AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "CICD Stack (1) CodePipeline Cross Account Deployment Stack for Stackset Deployment across AWS Organizations"

Parameters:
  ProjectFriendlyName:
    Type: String
    Default: PROJECT-FRIENDLY-NAME
    Description: Enter an friendly project name for Tagging

  ProjectResourcePrefix:
    Type: String
    Default: PROJECT-RESOURCE-PREFIX
    Description: Enter a unique prefix for the project resources.

  RepoName:
    Description: "Name of the GIT Repository to clone"
    Type: String
    Default: 'PROJECT-RESOURCE-PREFIX'
  
  BucketFolderPrefix:
    Description: "The S3 bucket prefix to use for codepipeline build artifacts - bucket must already exist"
    Type: String
    Default: 'codebuild'

  BranchName:
    Description: "The git branch to operate from (i.e. dev, prod, uat, main)"
    Type: String
    
  CodeBuildImage:
    Type: String
    Description: The docker repo path to build image
    Default: aws/codebuild/standard:5.0

  EmailFailedBuildNotifications:
    Type: String
    Description: The email address to send notifications regarding failed CodePipeline builds
    Default: 'pipeline-failed@mydomain.com'
  
  EmailApprovalNotifications:
    Type: String
    Description: The email address to send notifications regarding failed CodePipeline builds
    Default: 'deployment-approvals@mydomain.com'

  GroupChatIntegration:
    Type: String
    Description: Determines if CI/CD will integrate with a Group Chat service (Slack or MS Teams)
    Default: 'none'
    AllowedValues:
          - 'none'
          - 'slack'
          - 'msteams'

Conditions:
  IsSlackIntegrationEnabled: !Equals 
    - !Ref GroupChatIntegration
    - slack
  IsMSTeamsIntegrationEnabled: !Equals 
    - !Ref GroupChatIntegration
    - msteams

Resources:

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: eb-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: 
                  !Join [ '', 
                    [ 
                      'arn:aws:codepipeline:', 
                      !Ref 'AWS::Region', 
                      ':', 
                      !Ref 'AWS::AccountId', 
                      ':', 
                      !Ref AppPipeline 
                    ] 
                  ]

  LambdaExecutionRoleCore:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Path: "/"
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
        - PolicyName: SNS
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:*
                Resource: "*"
        - PolicyName: S3-For-RDK
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: "*"
        - PolicyName: Secrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - '*'
                Effect: Allow
                Resource: '*'

  CodePipeLineRole:
    Type: "AWS::IAM::Role"
    DependsOn: CodeBuildRole
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
      -
        PolicyName: "code-pipeline-access"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "*"
              Resource: "*"
      -
        PolicyName: "assume-role-policy-target-account"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Resource: 
                !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-ca-role-${ProjectResourcePrefix}"
      -
        PolicyName: "assume-role-policy-repo-account"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Resource: 
                !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-cc-role-${ProjectResourcePrefix}"

  CodePipelineApprovalSNSTopic:
    Type: AWS::SNS::Topic
    DependsOn: CodePipeLineRole
    Properties:
      TopicName: !Sub "${ProjectResourcePrefix}-pipeline-approval-topic"
      DisplayName: !Sub "${ProjectResourcePrefix} Approval Request"
  
  CodePipelineFailureSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectResourcePrefix}-pipeline-failure-topic"
      DisplayName: !Sub "${ProjectResourcePrefix} Execution Failed"
  
  CodePipelineSuccessSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectResourcePrefix}-pipeline-success-topic"
      DisplayName: !Sub "${ProjectResourcePrefix} Execution Succeeded"

  CodePipelineApprovalSNSSubscriptionEmail:
    Type: AWS::SNS::Subscription
    DependsOn: CodePipelineApprovalSNSTopic
    Properties:
      Protocol: email
      Endpoint: !Ref EmailApprovalNotifications
      TopicArn: !Ref CodePipelineApprovalSNSTopic

  # CodePipelineFailureSNSSubscriptionEmail:
  #   Type: AWS::SNS::Subscription
  #   DependsOn: CodePipelineFailureSNSTopic
  #   Properties:
  #     Protocol: email
  #     Endpoint: !Ref EmailFailedBuildNotifications
  #     TopicArn: !Ref CodePipelineFailureSNSTopic

  CodePipelineApprovalSNSTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    DependsOn: CodePipelineApprovalSNSTopic
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref CodePipelineApprovalSNSTopic
      Topics:
        - !Ref CodePipelineApprovalSNSTopic

  CodePipelineFailureSNSTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    DependsOn: CodePipelineFailureSNSTopic
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref CodePipelineFailureSNSTopic
      Topics:
        - !Ref CodePipelineFailureSNSTopic
  
  CodePipelineSuccessSNSTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    DependsOn: CodePipelineSuccessSNSTopic
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref CodePipelineSuccessSNSTopic
      Topics:
        - !Ref CodePipelineSuccessSNSTopic

  CloudFormationCodeBuildProjectTest:
    Type: AWS::CodeBuild::Project
    DependsOn: CodePipelineFailureSNSTopicPolicy
    Properties:
      Name: !Sub '${AWS::StackName}-CloudFormationBuild-Test'
      ServiceRole: !Ref CodeBuildRole
      EncryptionKey:
        Fn::ImportValue:
          !Sub "${ProjectResourcePrefix}-cp-kms-key"
      Source:
        Type: CODEPIPELINE
        BuildSpec: ./cf/cicd/buildspec_test.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildImage
        EnvironmentVariables:
          - Name: CODEPIPELINE_BUCKET
            Value:
              !Sub "${ProjectResourcePrefix}-artifacts-codebuild"
          - Name: RDK_RULES_S3_BUCKET
            Value:
              !Sub "${ProjectResourcePrefix}-artifacts-rdk-lambda-test"
          - Name: RDK_LAMBDA_ROLE
            Value:
              Fn::ImportValue:
                !Sub '${ProjectResourcePrefix}-rdk-lambda-execution-role-arn'
          - Name: ENVIRONMENT_TYPE
            Value:
              !Sub "test"
          - Name: CURRENT_AWS_ACCOUNT_ID
            Value:
              !Sub "${AWS::AccountId}"
          - Name: LAMBDA_ROLE
            Value:
              !Ref LambdaExecutionRoleCore
          - Name: BUCKETFOLDER_PREFIX
            Value: 
              !Ref BucketFolderPrefix
          - Name: PROJECT_PREFIX
            Value: 
              !Sub "${ProjectResourcePrefix}"
          - Name: KMS_KEY_ARN
            Value:
              Fn::ImportValue:
                !Sub "${ProjectResourcePrefix}-cp-kms-key"
      TimeoutInMinutes: 15

  CloudFormationCodeBuildProjectProd:
    Type: AWS::CodeBuild::Project
    DependsOn: CloudFormationCodeBuildProjectTest
    Properties:
      Name: !Sub '${AWS::StackName}-CloudFormationBuild-Prod'
      ServiceRole: !Ref CodeBuildRole
      EncryptionKey:
        Fn::ImportValue:
          !Sub "${ProjectResourcePrefix}-cp-kms-key"
      Source:
        Type: CODEPIPELINE
        BuildSpec: ./cf/cicd/buildspec_prod.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildImage
        EnvironmentVariables:
          - Name: CODEPIPELINE_BUCKET
            Value:
              !Sub "${ProjectResourcePrefix}-artifacts-codebuild"
          - Name: RDK_RULES_S3_BUCKET
            Value:
              !Sub "${ProjectResourcePrefix}-artifacts-rdk-lambda-prod"
          - Name: RDK_LAMBDA_ROLE
            Value:
              Fn::ImportValue:
                !Sub '${ProjectResourcePrefix}-rdk-lambda-execution-role-arn'
          - Name: ENVIRONMENT_TYPE
            Value:
              !Sub "prod"
          - Name: CURRENT_AWS_ACCOUNT_ID
            Value:
              !Sub "${AWS::AccountId}"
          - Name: LAMBDA_ROLE
            Value:
              !Ref LambdaExecutionRoleCore
          - Name: BUCKETFOLDER_PREFIX
            Value: 
              !Ref BucketFolderPrefix
          - Name: PROJECT_PREFIX
            Value: 
              !Sub "${ProjectResourcePrefix}"
          - Name: KMS_KEY_ARN
            Value:
              Fn::ImportValue:
                !Sub "${ProjectResourcePrefix}-cp-kms-key"
      TimeoutInMinutes: 15

  AppPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    DependsOn: CloudFormationCodeBuildProjectProd
    Properties:
      Name: !Sub "${ProjectResourcePrefix}-codepipeline"
      RoleArn: !GetAtt CodePipeLineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                -
                  Name: SourceCode
              RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-cc-role-${ProjectResourcePrefix}"
              Namespace: "SourceVariables"
              Configuration:
                PollForSourceChanges: false
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepoName
              RunOrder: 1
        -
          Name: InitialBuild-DevSecOps-Resources
          Actions:
            -
              Name: CallCodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                -
                  Name: SourceCode
              OutputArtifacts:
                -
                  Name: DeployableArtifactInitial
              Configuration:
                ProjectName: !GetAtt CloudFormationCodeBuildProjectTest.Arn
              RunOrder: 1
        -
          Name: Test-Infrastructure-Deploy
          Actions:
            -
              Name: CreateChangeSetTestAccounts
              RoleArn: 
                !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-ca-role-${ProjectResourcePrefix}"
              InputArtifacts:
                -
                  Name: DeployableArtifactInitial
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
                ChangeSetName: !Sub '${ProjectResourcePrefix}-test-changeset'
                RoleArn: 
                  !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-cf-role-${ProjectResourcePrefix}"
                StackName: !Sub '${ProjectResourcePrefix}-test'
                TemplatePath: !Sub 'DeployableArtifactInitial::MasterStack-test.template.json'
              RunOrder: 1
            -
              Name: ExecuteChangeSetTestAccounts
              RoleArn: 
                !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-ca-role-${ProjectResourcePrefix}"
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub '${ProjectResourcePrefix}-test-changeset'
                StackName: !Sub '${ProjectResourcePrefix}-test'
                RoleArn: 
                  !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-cf-role-${ProjectResourcePrefix}"
              RunOrder: 2
        - 
          Name: Manual-QA-Approval
          Actions:
            -
              Name: "ManualQAEmail"
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                NotificationArn: !Ref CodePipelineApprovalSNSTopic
                CustomData:
                  !Sub |
                    { 
                      "title": "Manual approval required",
                      "message": "Click the link to approval or reject this change to *${ProjectFriendlyName}*. This solution has been deployed to your designated TEST Account(s) for review prior to PROD deployment.",
                      "git_commit_msg": "#{SourceVariables.CommitMessage}" 
                    }
              RunOrder: 1
        -
          Name: FinalBuild-DevSecOps-Resources
          Actions:
            -
              Name: CallCodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                -
                  Name: SourceCode
                - 
                  Name: DeployableArtifactInitial
              OutputArtifacts:
                -
                  Name: DeployableArtifactFinal
              Configuration:
                ProjectName: !GetAtt CloudFormationCodeBuildProjectProd.Arn
                PrimarySource: SourceCode
              RunOrder: 1
        -
          Name: Production-Infrastructure-Deploy
          Actions:
            -
              Name: CreateChangeSetProdAccounts
              RoleArn: 
                !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-ca-role-${ProjectResourcePrefix}"
              InputArtifacts:
                -
                  Name: DeployableArtifactInitial
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
                ChangeSetName: !Sub '${ProjectResourcePrefix}-prod-changeset'
                RoleArn: 
                  !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-cf-role-${ProjectResourcePrefix}"
                StackName: !Sub '${ProjectResourcePrefix}-prod'
                TemplatePath: !Sub 'DeployableArtifactInitial::MasterStack-prod.template.json'
              RunOrder: 1
            -
              Name: ExecuteChangeSetProdAccounts
              RoleArn: 
                !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-ca-role-${ProjectResourcePrefix}"
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub '${ProjectResourcePrefix}-prod-changeset'
                StackName: !Sub '${ProjectResourcePrefix}-prod'
                RoleArn: 
                  !Sub "arn:aws:iam::${AWS::AccountId}:role/cp-cf-role-${ProjectResourcePrefix}"
              RunOrder: 2

      ArtifactStore:
        Type: S3
        Location:
            !Sub "${ProjectResourcePrefix}-artifacts-codebuild"
        EncryptionKey:
          Id:
            Fn::ImportValue:
              !Sub "${ProjectResourcePrefix}-cp-kms-key"
          Type: KMS

  CloudWatchCodePipelineFailureRule:
    Type: AWS::Events::Rule
    DependsOn: AppPipeline
    Properties:
      Name: !Sub "${ProjectResourcePrefix}-cp-frule"
      EventPattern:
        source: 
          - "aws.codepipeline"
        detail-type: 
          - "CodePipeline Stage Execution State Change"
        detail: 
          state: 
            - "FAILED"
          pipeline:
            - !Ref AppPipeline
      Targets:
        - 
          Arn:
            Ref: CodePipelineFailureSNSTopic
          Id: CodePipelineFailureSNSTopic

  CloudWatchCodePipelineStartedRule:
    Type: AWS::Events::Rule
    DependsOn: AppPipeline
    Properties:
      Name: !Sub "${ProjectResourcePrefix}-cp-startedrule"
      EventPattern:
        source: 
          - "aws.codepipeline"
        detail-type: 
          - "CodePipeline Stage Execution State Change"
        detail: 
          state: 
            - "STARTED"
          pipeline:
            - !Ref AppPipeline
          stage:
            - 'Source'
      Targets:
        - 
          Arn:
            Ref: CodePipelineSuccessSNSTopic
          Id: CodePipelineSuccessSNSTopic

  CloudWatchCodePipelineTestDeployStageSuccessRule:
    Type: AWS::Events::Rule
    DependsOn: AppPipeline
    Properties:
      Name: !Sub "${ProjectResourcePrefix}-cp-test-ssrule"
      EventPattern:
        source: 
          - "aws.codepipeline"
        detail-type: 
          - "CodePipeline Stage Execution State Change"
        detail: 
          state: 
            - "SUCCEEDED"
          pipeline:
            - !Ref AppPipeline
          stage:
            - 'Test-Infrastructure-Deploy'
      Targets:
        - 
          Arn:
            Ref: CodePipelineSuccessSNSTopic
          Id: CodePipelineSuccessSNSTopic

  CloudWatchCodePipelineApprovalStageSuccessRule:
    Type: AWS::Events::Rule
    DependsOn: AppPipeline
    Properties:
      Name: !Sub "${ProjectResourcePrefix}-cp-approv-ssrule"
      EventPattern:
        source: 
          - "aws.codepipeline"
        detail-type: 
          - "CodePipeline Stage Execution State Change"
        detail: 
          state: 
            - "SUCCEEDED"
          pipeline:
            - !Ref AppPipeline
          stage:
            - 'Manual-QA-Approval'
      Targets:
        - 
          Arn:
            Ref: CodePipelineSuccessSNSTopic
          Id: CodePipelineSuccessSNSTopic

  CloudWatchCodePipelineProdDeployStageSuccessRule:
    Type: AWS::Events::Rule
    DependsOn: AppPipeline
    Properties:
      Name: !Sub "${ProjectResourcePrefix}-cp-prod-ssrule"
      EventPattern:
        source: 
          - "aws.codepipeline"
        detail-type: 
          - "CodePipeline Stage Execution State Change"
        detail: 
          state: 
            - "SUCCEEDED"
          pipeline:
            - !Ref AppPipeline
          stage:
            - 'Production-Infrastructure-Deploy'
      Targets:
        - 
          Arn:
            Ref: CodePipelineSuccessSNSTopic
          Id: CodePipelineSuccessSNSTopic

  SNStoMSTeamsFunction:
    Condition: IsMSTeamsIntegrationEnabled
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: ../../code/nodejs/src/sns_to_msteams/package/sns_to_msteams.zip
      Description: CodePipeline SNS notifications to MS Teams
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt [LambdaExecutionRoleCore, Arn]
      Tracing: Active
      Environment:
        Variables:
          PROJECT_NAME: !Sub "${ProjectFriendlyName}"
          PROJECT_PREFIX: !Ref ProjectResourcePrefix
          MASTER_DEPLOYMENT_ACCOUNT: !Sub "${AWS::AccountId}"
      Tags:
        Project: !Sub "${ProjectFriendlyName}"
        Purpose: "MS Teams notifications for CodePipeline"

  SNStoMSTeamsFunctionInvokePermission:
    Condition: IsMSTeamsIntegrationEnabled
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SNStoMSTeamsFunction
      Principal: sns.amazonaws.com

  SNStoSlackFunction:
    Type: AWS::Serverless::Function
    Condition: IsSlackIntegrationEnabled
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: ../../code/nodejs/src/sns_to_slack/package/sns_to_slack.zip
      Description: CodePipeline SNS notifications to Slack
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt [LambdaExecutionRoleCore, Arn]
      Tracing: Active
      Environment:
        Variables:
          PROJECT_NAME: !Sub "${ProjectFriendlyName}"
          PROJECT_PREFIX: !Ref ProjectResourcePrefix
          MASTER_DEPLOYMENT_ACCOUNT: !Sub "${AWS::AccountId}"
      Tags:
        Project: !Sub "${ProjectFriendlyName}"
        Purpose: "Slack notifications for CodePipeline"

  SNStoSlackFunctionInvokePermission:
    Condition: IsSlackIntegrationEnabled
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SNStoSlackFunction
      Principal: sns.amazonaws.com

  CodePipelineApprovalSNSSubscriptionMSTeams:
    Condition: IsMSTeamsIntegrationEnabled
    Type: AWS::SNS::Subscription
    DependsOn: CodePipelineApprovalSNSTopic
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt SNStoMSTeamsFunction.Arn
      TopicArn: !Ref CodePipelineApprovalSNSTopic

  CodePipelineApprovalSNSSubscriptionSlack:
    Condition: IsSlackIntegrationEnabled
    Type: AWS::SNS::Subscription
    DependsOn: CodePipelineApprovalSNSTopic
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt SNStoSlackFunction.Arn
      TopicArn: !Ref CodePipelineApprovalSNSTopic

  CodePipelineSuccessSNSSubscriptionMSTeams:
    Condition: IsMSTeamsIntegrationEnabled
    Type: AWS::SNS::Subscription
    DependsOn: CodePipelineSuccessSNSTopic
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt SNStoMSTeamsFunction.Arn
      TopicArn: !Ref CodePipelineSuccessSNSTopic

  CodePipelineSuccessSNSSubscriptionSlack:
    Condition: IsSlackIntegrationEnabled
    Type: AWS::SNS::Subscription
    DependsOn: CodePipelineSuccessSNSTopic
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt SNStoSlackFunction.Arn
      TopicArn: !Ref CodePipelineSuccessSNSTopic
  
  CodePipelineFailureSNSSubscriptionMSTeams:
    Condition: IsMSTeamsIntegrationEnabled
    Type: AWS::SNS::Subscription
    DependsOn: CodePipelineSuccessSNSTopic
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt SNStoMSTeamsFunction.Arn
      TopicArn: !Ref CodePipelineFailureSNSTopic

  CodePipelineFailureSNSSubscriptionSlack:
    Condition: IsSlackIntegrationEnabled
    Type: AWS::SNS::Subscription
    DependsOn: CodePipelineFailureSNSTopic
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt SNStoSlackFunction.Arn
      TopicArn: !Ref CodePipelineFailureSNSTopic

  CodeCommitEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Join [ '', 
              [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', 
                !Ref RepoName
              ]
            ]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Sub "${BranchName}"
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
          RoleArn: !GetAtt EventBridgeRole.Arn
          Id: !Sub "er-cp-${ProjectResourcePrefix}"

Outputs:
  ProjectResourcePrefix:
    Description: "The unique prefix given to project/application"
    Value: !Ref ProjectResourcePrefix
  
  ProjectFriendlyName:
    Description: "The user-friendly name given to project/application"
    Value: !Ref ProjectFriendlyName

  CodePipelineJob:
    Description: "Name of the code pipeline job created"
    Value: !Ref AppPipeline

  CodePipelineKMSKeyArn:
    Description: "The KMS Arn used for Cross-account deployment of this pipeline"
    Value:
      Fn::ImportValue:
        !Sub "${ProjectResourcePrefix}-cp-kms-key"
